{"ast":null,"code":"export const validateText = function (elementName, value) {\n  let minLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  if (value.length == 0) return `${elementName} is required`;else if (value.length < minLength) return `${elementName} must contain at least ${minLength} characters`;else return '';\n};\nexport const validateEmail = function (elementName, value) {\n  let regEx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (value.length == 0) return `${elementName} is required`;else if (!regEx.test(value)) return `${elementName} must be an valid email address, eg. name@domain.com`;else return '';\n};\n\n// export const submitData = async (url: string, method: string, data: string, contentType = 'application/json') => {\n\n//     const res = await fetch (url, {\n//       method: method,\n//       headers: {\n//         'Content-Type': contentType\n//       },\n//       body: data     \n//     })\n\n//     if (res.status === 200) \n//         return true\n\n//     return false\n//   }\n\n// export const validate = (e: any, form: any) => { \n//    if (e.type === 'submit') {\n//     const errors:any = {}\n//     errors.name = validate_name(form.name) \n//     errors.email = validate_email(form.email) \n//     errors.comments = validate_comments(form.comments) \n//     return errors\n\n//    } else {\n//         const {id, value} = e.target\n//         switch(id) {\n//             case 'name':\n//                 return validate_name(value)\n//             case 'email':\n//                 return validate_email(value)\n//             case 'comments':\n//                 return validate_comments(value)\n//         }\n//    }\n// }\n\n// const validate_comments = (value: string) => {\n//     if (!value)\n//         return 'A comment is required'\n//     else if (value.length < 5)\n//         return 'Your comment must be at least 5 characters long'\n//     else\n//         return null\n// }","map":{"version":3,"names":["validateText","elementName","value","minLength","length","validateEmail","regEx","test"],"sources":["C:/Users/sangs/Documents/Webbutvecklare inom .NET/Javascript backend/InlÃ¤mningsuppgift javascript backend/typescript/src/scripts/validation.tsx"],"sourcesContent":["export const validateText = (elementName: string, value: string, minLength: number = 2) => {\r\n    if (value.length == 0)\r\n        return `${elementName} is required`\r\n    else if (value.length < minLength)\r\n        return `${elementName} must contain at least ${minLength} characters`\r\n    else \r\n        return ''\r\n}\r\n\r\nexport const validateEmail = (elementName: string, value: string, regEx: RegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) => {\r\n    if (value.length == 0)\r\n        return `${elementName} is required`\r\n    else if (!regEx.test(value))\r\n        return `${elementName} must be an valid email address, eg. name@domain.com`\r\n    else \r\n        return ''\r\n}\r\n\r\n\r\n\r\n// export const submitData = async (url: string, method: string, data: string, contentType = 'application/json') => {\r\n\r\n//     const res = await fetch (url, {\r\n//       method: method,\r\n//       headers: {\r\n//         'Content-Type': contentType\r\n//       },\r\n//       body: data     \r\n//     })\r\n\r\n//     if (res.status === 200) \r\n//         return true\r\n\r\n//     return false\r\n//   }\r\n\r\n\r\n// export const validate = (e: any, form: any) => { \r\n//    if (e.type === 'submit') {\r\n//     const errors:any = {}\r\n//     errors.name = validate_name(form.name) \r\n//     errors.email = validate_email(form.email) \r\n//     errors.comments = validate_comments(form.comments) \r\n//     return errors\r\n\r\n//    } else {\r\n//         const {id, value} = e.target\r\n//         switch(id) {\r\n//             case 'name':\r\n//                 return validate_name(value)\r\n//             case 'email':\r\n//                 return validate_email(value)\r\n//             case 'comments':\r\n//                 return validate_comments(value)\r\n//         }\r\n//    }\r\n// }\r\n\r\n\r\n\r\n\r\n// const validate_comments = (value: string) => {\r\n//     if (!value)\r\n//         return 'A comment is required'\r\n//     else if (value.length < 5)\r\n//         return 'Your comment must be at least 5 characters long'\r\n//     else\r\n//         return null\r\n// }"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,UAACC,WAAmB,EAAEC,KAAa,EAA4B;EAAA,IAA1BC,SAAiB,uEAAG,CAAC;EAClF,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EACjB,OAAQ,GAAEH,WAAY,cAAa,MAClC,IAAIC,KAAK,CAACE,MAAM,GAAGD,SAAS,EAC7B,OAAQ,GAAEF,WAAY,0BAAyBE,SAAU,aAAY,MAErE,OAAO,EAAE;AACjB,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,UAACJ,WAAmB,EAAEC,KAAa,EAAkL;EAAA,IAAhLI,KAAa,uEAAG,2JAA2J;EACzO,IAAIJ,KAAK,CAACE,MAAM,IAAI,CAAC,EACjB,OAAQ,GAAEH,WAAY,cAAa,MAClC,IAAI,CAACK,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC,EACvB,OAAQ,GAAED,WAAY,sDAAqD,MAE3E,OAAO,EAAE;AACjB,CAAC;;AAID;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}