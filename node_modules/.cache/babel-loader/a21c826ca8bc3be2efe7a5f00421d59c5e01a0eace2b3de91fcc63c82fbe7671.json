{"ast":null,"code":"// import React, {useState} from 'react'\n// import { validateFirstName, validateLastName, validateSignUpEmail, validatePassword } from '../scripts/validation'\n// import FormNotification from '../components/FormNotification'\n\n// interface SignUpFormDataType {\n//     firstName: string,\n//     lastName: string,\n//     signUpEmail: string,\n//     password: string    \n//   }\n\n//   const SignUpSection: React.FC = () => {\n//     const signUpForm_default: SignUpFormDataType = { firstName: '', lastName: '', signUpEmail: '', password: '' } \n//     const [signUpFormData, setSignUpFormData] = useState<SignUpFormDataType>(signUpForm_default)\n//     const [signUpErrors, setSignUpErrors] = useState<SignUpFormDataType>(signUpForm_default)\n//     const [signUpsubmitted, setSignUpSubmitted] = useState<boolean>(false)\n//     const [failedSignUpSubmit, setSignUpFailedSubmit] = useState<boolean>(false)\n\n//     const handleSignUpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const {id, value} = e.target\n//         setSignUpFormData({...signUpFormData, [id]: value})\n\n//         if (id === 'firstName')\n//         setSignUpErrors({...signUpErrors, [id]: validateFirstName(value)})\n\n//         if (id === 'lastName')\n//         setSignUpErrors({...signUpErrors, [id]: validateLastName(value)})\n\n//         if (id === 'signUpEmail')\n//         setSignUpErrors({...signUpErrors, [id]: validateSignUpEmail(value)})\n\n//         if (id === 'password')\n//         setSignUpErrors({...signUpErrors, [id]: validatePassword(value)})\n//     }\n\n//     const handleSignUp = async (e: React.FormEvent) => {\n//         e.preventDefault()\n//         setSignUpSubmitted(false)\n//         setSignUpFailedSubmit(false)\n\n//         if (signUpFormData.firstName !== '' && signUpFormData.lastName !== '' && signUpFormData.signUpEmail !== '' && signUpFormData.password !== '')\n//           if (signUpErrors.firstName === '' && signUpErrors.lastName === '' && signUpErrors.signUpEmail === '' && signUpErrors.password === '') {\n\n//             const result = await fetch('https://win22.webapi.azurewebsites.net/api/signup', {\n//               method: 'post',\n//               headers: {\n//                 'Content-type': 'application/json'\n//               },\n//               body: JSON.stringify(signUpFormData)\n//             })\n\n//             if (result.status === 200) {\n//                 setSignUpSubmitted(true)\n//                 setSignUpFormData(signUpForm_default)\n//             } else {\n//                 setSignUpSubmitted(false)\n//                 setSignUpFailedSubmit(true)\n//             }\n\n//             const data = await result.json()\n//             console.log(data)\n//           }    \n//       }\n\n//   return (\n//     <section className=\"signUpForm\">\n//       <div className=\"container\">\n\n//         {signUpsubmitted ? (<FormNotification notificationType='success' title='Your account has been registered!' text=''/>) : (<></>)}\n//         {failedSignUpSubmit ? (<FormNotification notificationType='danger' title='Something went wrong!' text=\"We couln't create an account right now - please try again later\"/>) : (<></>)}\n\n//         <h2>EMPLOYEE SIGN UP</h2>\n//         <form onSubmit={handleSignUp} noValidate>\n//           <div>\n//             <input id=\"firstName\" className={(signUpErrors?.firstName ? 'error': '')} value={signUpFormData.firstName} onChange={(e) => handleSignUpChange(e)} type=\"text\" placeholder=\"Your first name\" />\n//             <div className=\"errorMessage\">{signUpErrors?.firstName}</div>\n//           </div>\n//           <div>\n//             <input id=\"lastName\" className={(signUpErrors?.lastName ? 'error': '')} value={signUpFormData.lastName} onChange={(e) => handleSignUpChange(e)} type=\"text\" placeholder=\"Your last name\" />\n//             <div className=\"errorMessage\">{signUpErrors?.lastName}</div>\n//           </div>\n//           <div>\n//             <input id=\"signUpEmail\" className={(signUpErrors?.signUpEmail ? 'error': '')} value={signUpFormData.signUpEmail} onChange={(e) => handleSignUpChange(e)} type=\"email\" placeholder=\"Your e-mail address\" />\n//             <div className=\"errorMessage\">{signUpErrors?.signUpEmail}</div>\n//           </div>\n//           <div>\n//             <input id=\"password\" className={(signUpErrors?.password ? 'error': '')} value={signUpFormData.password} onChange={(e) => handleSignUpChange(e)} type=\"password\" placeholder=\"Password\" />\n//             <div className=\"errorMessage\">{signUpErrors?.password}</div>\n//           </div>\n\n//           <div className=\"formBtn\">\n//             <button type=\"submit\" className=\"btn-theme\">SIGN UP</button>\n//           </div>\n//         </form>    \n//       </div>\n//     </section>\n//   )\n// }\n\n// export default SignUpSection","map":{"version":3,"names":[],"sources":["C:/Users/sangs/Documents/Webbutvecklare inom .NET/Javascript backend/InlÃ¤mningsuppgift javascript backend/webapp/src/sections/SignUpSection.tsx"],"sourcesContent":["// import React, {useState} from 'react'\r\n// import { validateFirstName, validateLastName, validateSignUpEmail, validatePassword } from '../scripts/validation'\r\n// import FormNotification from '../components/FormNotification'\r\n\r\n// interface SignUpFormDataType {\r\n//     firstName: string,\r\n//     lastName: string,\r\n//     signUpEmail: string,\r\n//     password: string    \r\n//   }\r\n\r\n//   const SignUpSection: React.FC = () => {\r\n//     const signUpForm_default: SignUpFormDataType = { firstName: '', lastName: '', signUpEmail: '', password: '' } \r\n//     const [signUpFormData, setSignUpFormData] = useState<SignUpFormDataType>(signUpForm_default)\r\n//     const [signUpErrors, setSignUpErrors] = useState<SignUpFormDataType>(signUpForm_default)\r\n//     const [signUpsubmitted, setSignUpSubmitted] = useState<boolean>(false)\r\n//     const [failedSignUpSubmit, setSignUpFailedSubmit] = useState<boolean>(false)\r\n\r\n//     const handleSignUpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//         const {id, value} = e.target\r\n//         setSignUpFormData({...signUpFormData, [id]: value})\r\n    \r\n//         if (id === 'firstName')\r\n//         setSignUpErrors({...signUpErrors, [id]: validateFirstName(value)})\r\n\r\n//         if (id === 'lastName')\r\n//         setSignUpErrors({...signUpErrors, [id]: validateLastName(value)})\r\n    \r\n//         if (id === 'signUpEmail')\r\n//         setSignUpErrors({...signUpErrors, [id]: validateSignUpEmail(value)})\r\n\r\n//         if (id === 'password')\r\n//         setSignUpErrors({...signUpErrors, [id]: validatePassword(value)})\r\n//     }\r\n\r\n//     const handleSignUp = async (e: React.FormEvent) => {\r\n//         e.preventDefault()\r\n//         setSignUpSubmitted(false)\r\n//         setSignUpFailedSubmit(false)\r\n  \r\n//         if (signUpFormData.firstName !== '' && signUpFormData.lastName !== '' && signUpFormData.signUpEmail !== '' && signUpFormData.password !== '')\r\n//           if (signUpErrors.firstName === '' && signUpErrors.lastName === '' && signUpErrors.signUpEmail === '' && signUpErrors.password === '') {\r\n  \r\n//             const result = await fetch('https://win22.webapi.azurewebsites.net/api/signup', {\r\n//               method: 'post',\r\n//               headers: {\r\n//                 'Content-type': 'application/json'\r\n//               },\r\n//               body: JSON.stringify(signUpFormData)\r\n//             })\r\n\r\n//             if (result.status === 200) {\r\n//                 setSignUpSubmitted(true)\r\n//                 setSignUpFormData(signUpForm_default)\r\n//             } else {\r\n//                 setSignUpSubmitted(false)\r\n//                 setSignUpFailedSubmit(true)\r\n//             }\r\n\r\n//             const data = await result.json()\r\n//             console.log(data)\r\n//           }    \r\n//       }\r\n\r\n\r\n//   return (\r\n//     <section className=\"signUpForm\">\r\n//       <div className=\"container\">\r\n        \r\n//         {signUpsubmitted ? (<FormNotification notificationType='success' title='Your account has been registered!' text=''/>) : (<></>)}\r\n//         {failedSignUpSubmit ? (<FormNotification notificationType='danger' title='Something went wrong!' text=\"We couln't create an account right now - please try again later\"/>) : (<></>)}\r\n        \r\n//         <h2>EMPLOYEE SIGN UP</h2>\r\n//         <form onSubmit={handleSignUp} noValidate>\r\n//           <div>\r\n//             <input id=\"firstName\" className={(signUpErrors?.firstName ? 'error': '')} value={signUpFormData.firstName} onChange={(e) => handleSignUpChange(e)} type=\"text\" placeholder=\"Your first name\" />\r\n//             <div className=\"errorMessage\">{signUpErrors?.firstName}</div>\r\n//           </div>\r\n//           <div>\r\n//             <input id=\"lastName\" className={(signUpErrors?.lastName ? 'error': '')} value={signUpFormData.lastName} onChange={(e) => handleSignUpChange(e)} type=\"text\" placeholder=\"Your last name\" />\r\n//             <div className=\"errorMessage\">{signUpErrors?.lastName}</div>\r\n//           </div>\r\n//           <div>\r\n//             <input id=\"signUpEmail\" className={(signUpErrors?.signUpEmail ? 'error': '')} value={signUpFormData.signUpEmail} onChange={(e) => handleSignUpChange(e)} type=\"email\" placeholder=\"Your e-mail address\" />\r\n//             <div className=\"errorMessage\">{signUpErrors?.signUpEmail}</div>\r\n//           </div>\r\n//           <div>\r\n//             <input id=\"password\" className={(signUpErrors?.password ? 'error': '')} value={signUpFormData.password} onChange={(e) => handleSignUpChange(e)} type=\"password\" placeholder=\"Password\" />\r\n//             <div className=\"errorMessage\">{signUpErrors?.password}</div>\r\n//           </div>\r\n\r\n//           <div className=\"formBtn\">\r\n//             <button type=\"submit\" className=\"btn-theme\">SIGN UP</button>\r\n//           </div>\r\n//         </form>    \r\n//       </div>\r\n//     </section>\r\n//   )\r\n// }\r\n\r\n// export default SignUpSection"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}